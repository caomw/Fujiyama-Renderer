Fujiyama Renderer
=================

  Overview
-----------------
Fujiyama is free and open source, distribution oriented ray-tracing renderer
designed to handle production image rendering. 
* Compatibility - written in pure ANSI C (x)
* Portability - depends on no external library (xx)
* Simplicity - requires only single C interface header file and library
* Compact - the core library is small and easy to embed
* Open Source - licensed under the terms of MIT License (See LICENSE)
   (x) fb2exr is written in C++
   (xx) some external tools require OpenEXR and OpneGL/GLUT

  Features
-----------------
* Supported Primitives
  + Triangle Mesh - Compact representation
  + Bezier Curves - Unlimited smoothness subdividing in render time 
  + Volume Primitive - Ray traced self-shadowing

* Procedure Plugin
  + Volume Filling Procedure - Pyroclastic clouds procedure provided
  + Volume Filling Procedure - Spline wisps procedure provided
  + Volume Filling Procedure - Surface wisps procedure provided

* File format
  + Original mesh format - ply2mesh and obj2mesh are provided
  + Original curve format - curvegen is provided
  + Original mipmap format - hdr2mip is provided
  + Original framebuffer format - fb2exr is provided
  + Command-like scene description language - works with text filter tools
  + Python Binding scene description - can utilize control structures and libraries
  + FrameBuffer Viewer - displays *.fb and *.mip 

* Lighting
  + Point light - traditional point light
  + Grid light - typical area light with single/double-sided option
  + Sphere light - another area light
  + Dome light - supports IBL with environment map

* Animation
  + Camera motion blur - sampling non-linear camera motion
  + Transform motion blur - sampling non-linear object transformation

* Shading and Texture
  + On demand reading of mipmap - unlimited number of texture images
  + Pluggable shader DSO - shaders can be written in C/C++ 
  + Subsurface scattering - implemented in shader

* Acceleratotion structure
  + On demand construction of accelerator - avoids unnecessary construction
  + Grid accelerator - for meshes (dense distribution)
  + BVH accelerator - for object instances (sparse distribution)
  + Object instance - saves memory usage

* Sampling and Filtering
  + Gaussian and Box pixel filters - supports filter width bigger than 1 pixel
  + Uniform grid pixel sampling
  + Jittered pixel sampling 

* Rendering
  + Region rendering - accelerates distribution rendering pipeline
  + Tile based rendering

http://fujiyama-renderer.com/
Copyright (c) 2011-2013 Hiroshi Tsubokawa
