#!/usr/bin/env python
#Copyright (c) 2011-2014 Hiroshi Tsubokawa
#See LICENSE and README

#import subprocess
import sys, glob, os

top_dir = '../..'
nmake_file = 'Makefile'

incpath = top_dir.replace('/', '\\') + '/src'
libpath = 'C:\\local\\lib'

write_dependencies = False

header = """\
#nmake file generated by {filename}
#Copyright (c) 2011-2014 Hiroshi Tsubokawa
#See LICENSE and README
""".format(filename = os.path.basename(__file__))

dirs = """\
INCLUDE_PATH = C:\\include
LIBRARY_PATH = C:\\lib

out_dir = bin
def_dir = def
tests_dir = tests
"""

opts = """\
opt = /O2 /Oi /GL
warn = #/W3
macro = /D "NODEBUG"
"""

aliases = """\
CC = cl.exe
LD = link.exe
CFLAGS = /nologo $(opt) $(warn) $(macro) /fp:precise /MD /openmp /I{} /I$(INCLUDE_PATH) /c
LDFLAGS = /nologo /LTCG /LIBPATH:$(out_dir) /LIBPATH:{} /LIBPATH:$(LIBRARY_PATH)
RM = del
""".format(incpath, libpath)

rules = """\
.c.obj:
	@$(CC) $(CFLAGS) /Fo$@ $<

.cpp.obj:
	@$(CC) $(CFLAGS) /D "OPENEXR_DLL" /EHsc /Fo$@ $<
"""

#===============================================================================
class Target:
	def __init__(self, name, source_list, additional_lib, additional_ldflags):
		self.name        = name
		self.tag         = name.replace('.', '_')
		self.obj_tag     = self.tag + '_obj'
		self.source_list = source_list
		self.object_list = []
		self.additional_lib     = additional_lib
		self.additional_ldflags = additional_ldflags

		for src in self.source_list:
			if src.endswith('.c'):
				self.object_list.append(src.replace('.c', '.obj'))
			elif src.endswith('.cpp'):
				self.object_list.append(src.replace('.cpp', '.obj'))

		self.def_name = ''
		self.lib_tag = ''
		self.exp_tag = ''
		if self.name.endswith('.dll'):
			self.def_name = self.name[:-4] + '.def'
			self.lib_tag =  self.name[:-4] + '_lib'
			self.exp_tag =  self.name[:-4] + '_exp'

		self.def_flag = ''
		if self.def_name != '':
			self.def_flag = '/DEF:$(def_dir)\\' + self.def_name

target_list = []

def fprint(f, header):
	f.write(header)

def print_target_header(f, target_name):
	fprint(f, '#' + '=' * 79 + '\n')
	fprint(f, '# ' + target_name + '\n')

def define_target(
		target_name,
		src_dir,
		additional_lib = '',
		additional_ldflags = ''):

	source_list = []
	source_list.extend(glob.glob(src_dir + '/*.c'))
	source_list.extend(glob.glob(src_dir + '/*.cpp'))
	source_list = sorted(source_list)

	target = Target(
		target_name,
		source_list,
		additional_lib,
		additional_ldflags)

	global target_list
	target_list.append(target)

def define_test(
		target_name,
		source_list,
		additional_lib = '',
		additional_ldflags = ''):

	target = Target(
		target_name,
		source_list,
		additional_lib,
		additional_ldflags)

	global target_list
	target_list.append(target)

#===============================================================================
#libscene
define_target(
	target_name = 'libscene.dll',
	src_dir     = top_dir + '/src',
	additional_lib     = '',
	additional_ldflags = '')

#sample
define_target(
	target_name = 'cube.exe',
	src_dir     = top_dir + '/scenes',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

#shaders
define_target(
	target_name = 'ConstantShader.dll',
	src_dir     = top_dir + '/shaders/constant_shader',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_target(
	target_name = 'GlassShader.dll',
	src_dir     = top_dir + '/shaders/glass_shader',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_target(
	target_name = 'HairShader.dll',
	src_dir     = top_dir + '/shaders/hair_shader',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_target(
	target_name = 'PlasticShader.dll',
	src_dir     = top_dir + '/shaders/plastic_shader',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_target(
	target_name = 'SSSShader.dll',
	src_dir     = top_dir + '/shaders/sss_shader',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_target(
	target_name = 'VolumeShader.dll',
	src_dir     = top_dir + '/shaders/volume_shader',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

#procedures
define_target(
	target_name = 'PointCloudsProcedure.dll',
	src_dir     = top_dir + '/procedures/pointclouds_procedure',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_target(
	target_name = 'SplineWispsProcedure.dll',
	src_dir     = top_dir + '/procedures/splinewisps_procedure',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_target(
	target_name = 'SurfaceWispsProcedure.dll',
	src_dir     = top_dir + '/procedures/surfacewisps_procedure',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

#tools
define_target(
	target_name = 'curvegen.exe',
	src_dir     = top_dir + '/tools/curve_generator',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_target(
	target_name = 'fb2exr.exe',
	src_dir     = top_dir + '/tools/fb2exr',
	additional_lib     = 'libscene.lib Half.lib Iex.lib IlmImf.lib IlmThread.lib Imath.lib zlibwapi.lib',
	additional_ldflags = '')

define_target(
	target_name = 'fbview.exe',
	src_dir     = top_dir + '/tools/framebuffer_viewer',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_target(
	target_name = 'hdr2mip.exe',
	src_dir     = top_dir + '/tools/hdr2mip',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_target(
	target_name = 'jpg2mip.exe',
	src_dir     = top_dir + '/tools/jpg2mip',
	additional_lib     = 'libscene.lib jpeg.lib',
	additional_ldflags = '')

define_target(
	target_name = 'obj2mesh.exe',
	src_dir     = top_dir + '/tools/obj2mesh',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_target(
	target_name = 'ply2mesh.exe',
	src_dir     = top_dir + '/tools/ply2mesh',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_target(
	target_name = 'ptcgen.exe',
	src_dir     = top_dir + '/tools/point_cloud_generator',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_target(
	target_name = 'scene.exe',
	src_dir     = top_dir + '/tools/scene_parser',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_target(
	target_name = 'velgen.exe',
	src_dir     = top_dir + '/tools/velocity_generator',
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

#===============================================================================
define_test(
	target_name = 'array_test.exe',
	source_list = [top_dir + '/tests/unit_test.c', top_dir + '/tests/array_test.c'],
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_test(
	target_name = 'box_test.exe',
	source_list = [top_dir + '/tests/unit_test.c', top_dir + '/tests/box_test.c'],
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_test(
	target_name = 'io_test.exe',
	source_list = [top_dir + '/tests/unit_test.c', top_dir + '/tests/io_test.c'],
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_test(
	target_name = 'numeric_test.exe',
	source_list = [top_dir + '/tests/unit_test.c', top_dir + '/tests/numeric_test.c'],
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

define_test(
	target_name = 'vector_test.exe',
	source_list = [top_dir + '/tests/unit_test.c', top_dir + '/tests/vector_test.c'],
	additional_lib     = 'libscene.lib',
	additional_ldflags = '')

#===============================================================================
f = open(nmake_file, 'w')
#f = sys.stdout

fprint(f, header)
fprint(f, '\n')
fprint(f, dirs)
fprint(f, '\n')
fprint(f, opts)
fprint(f, '\n')
fprint(f, aliases)
fprint(f, '\n')
fprint(f, rules)
fprint(f, '\n')

#===============================================================================
# target_ext = $(out_dir)\target.ext
for target in target_list:
	line = '{target_tag} = $(out_dir)\\{target_name}\n'.format(
		target_tag  = target.tag,
		target_name = target.name)
	fprint(f, line)

fprint(f, '\n')

#===============================================================================
# all: target1 ...
fprint(f, 'all:')
for target in target_list:
	line = ' \\\n  $({target_tag})'.format(target_tag = target.tag)
	fprint(f, line)

fprint(f, '\n\n')

#===============================================================================
fprint(f, '.PHONY: all clean check\n\n')

#===============================================================================
for target in target_list:
	print_target_header(f, target.name)

	fprint(f, target.obj_tag + ' =')

	for obj in target.object_list:
		fprint(f, ' \\\n  ' + obj.replace('/', '\\'))

	fprint(f, '\n\n')

	"""
	if write_dependencies:
		for src in target.source_list:
			p = subprocess.Popen(['gcc', '-MM', '-I' + top_dir + '/src', src], stdout=subprocess.PIPE)
			dep = target.src_dir + '/' + p.stdout.read()
			dep = dep.replace('/', '\\')
			dep = dep.replace('.o', '.obj')
			fprint(f, dep.rstrip() + '\n')

		fprint(f, '\n')
	"""

	if target.def_name != '':
		ldflags = '/DLL /DEF:$(def_dir)\\' + target.def_name
		fprint(f, target.lib_tag + ' = $(out_dir)\\' + target.name.replace('.dll', '.lib') + '\n')
		fprint(f, target.exp_tag + ' = $(out_dir)\\' + target.name.replace('.dll', '.exp') + '\n')
		fprint(f, '\n')

	else:
		ldflags = ''

	rule = """\
$({target_tag}): $({target_obj_tag})
	@echo {target_name}
	@$(LD) $(LDFLAGS) /out:$@ {ldflags} {target_additional_ldflags} {target_additional_lib} $({target_obj_tag})
"""
	fprint(f, rule.format(
		target_tag      = target.tag,
		target_obj_tag  = target.obj_tag,
		target_def_name = target.def_name,
		target_name     = target.name,
		ldflags         = ldflags,
		target_additional_lib      = target.additional_lib,
		target_additional_ldflags  = target.additional_ldflags,
		))

	fprint(f, '\n')

#===============================================================================
# clean:
print_target_header(f, 'clean')
fprint(f, 'clean:\n')
for target in target_list:
	fprint(f, '\t$(RM) $(' + target.tag + ')\n')
	fprint(f, '\t$(RM) $(' + target.obj_tag + ')\n')
	if target.def_name != '':
		fprint(f, '\t$(RM) $(' + target.lib_tag + ')\n')
		fprint(f, '\t$(RM) $(' + target.exp_tag + ')\n')

fprint(f, '\n')

f.close()
